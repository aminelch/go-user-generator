stages:
  - authentication
  - lint
  - test
  - build
  - quality-gate
  - deploy

variables:
  GO_VERSION: "1.23.4"
  CGO_ENABLED: "1"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

docker-login:
  stage: authentication
  image: docker:latest
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  services:
    - docker:dind

lint:
  stage: lint
  image: golangci/golangci-lint:v1.23.6-alpine
  script:
    - go mod tidy
    - golangci-lint run ./... --timeout=5m
  allow_failure: true
  needs:
    - docker-login

units-tests:
  stage: test
  image: "golang:$GO_VERSION"
  script:
    - go mod tidy
    - go test ./...
#  artifacts:
#    paths:
#      - coverage.out
  needs:
    - docker-login
    - lint

build:
  stage: build
  image: "golang:$GO_VERSION"
  script:
    - go mod tidy
    - go build -v -o api
  artifacts:
    paths:
      - api
  needs:
    - docker-login
    - lint

security-scan:
  stage: quality-gate
  image: "golang:$GO_VERSION"
  script:
    - curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.22.2
    - $(go env GOPATH)/bin/gosec -fmt=sonarqube -out=gosec-report.json -stdout ./...
  artifacts:
    when: always
    paths:
      - gosec-report.json
    expire_in: 1 day
  allow_failure: true
  needs:
    - docker-login

sonarcloud-check:
  stage: quality-gate
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dproject.settings=sonar-project.properties
  only:
    - merge_requests
    - main
  needs:
    - docker-login
    - security-scan

deploy-on-render:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - echo "Launch Render deployment..."
    - curl https://api.render.com/deploy/$RENDER_SERVICE_NAME?key=$RUNDER_SERVICE_KEY
  needs:
    - build
    - sonarcloud-check
  when: manual
  only:
    - main